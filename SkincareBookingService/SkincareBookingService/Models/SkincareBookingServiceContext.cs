// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace SkincareBookingService.Models;

public partial class SkincareBookingServiceContext : DbContext
{
    public SkincareBookingServiceContext(DbContextOptions<SkincareBookingServiceContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Blog> Blogs { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<Manager> Managers { get; set; }

    public virtual DbSet<QuizAnswer> QuizAnswers { get; set; }

    public virtual DbSet<QuizQuestion> QuizQuestions { get; set; }

    public virtual DbSet<QuizServiceResult> QuizServiceResults { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Schedule> Schedules { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<ServiceType> ServiceTypes { get; set; }

    public virtual DbSet<SkinTherapist> SkinTherapists { get; set; }

    public virtual DbSet<SkinType> SkinTypes { get; set; }

    public virtual DbSet<Slot> Slots { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK__Account__F267251E82CB7954");

            entity.ToTable("Account");

            entity.Property(e => e.AccountId).HasColumnName("accountId");
            entity.Property(e => e.AccountName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("accountName");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(15)
                .HasColumnName("phoneNumber");
            entity.Property(e => e.RoleId).HasColumnName("roleId");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updatedAt");

            entity.HasOne(d => d.Role).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Account__roleId__4D94879B");
        });

        modelBuilder.Entity<Blog>(entity =>
        {
            entity.HasKey(e => e.BlogId).HasName("PK__Blog__FA0AA72DC4CA5FCE");

            entity.ToTable("Blog");

            entity.Property(e => e.BlogId).HasColumnName("blogId");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");

            entity.HasOne(d => d.Customer).WithMany(p => p.Blogs)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Blog__customerId__571DF1D5");
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.BookingId).HasName("PK__Booking__C6D03BCD07D45E84");

            entity.ToTable("Booking");

            entity.Property(e => e.BookingId).HasColumnName("bookingId");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Location)
                .HasMaxLength(255)
                .HasColumnName("location");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(255)
                .HasColumnName("serviceName");
            entity.Property(e => e.SkinTherapistName)
                .HasMaxLength(100)
                .HasColumnName("skinTherapistName");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");

            entity.HasOne(d => d.Customer).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Booking__custome__74AE54BC");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__B611CB7DB1A7B864");

            entity.ToTable("Customer");

            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.RoleId).HasColumnName("roleId");
            entity.Property(e => e.SkinTypeName)
                .HasMaxLength(100)
                .HasColumnName("skinTypeName");

            entity.HasOne(d => d.Role).WithMany(p => p.Customers)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Customer__roleId__5070F446");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.FeedbackId).HasName("PK__Feedback__2613FD241F859E65");

            entity.ToTable("Feedback");

            entity.Property(e => e.FeedbackId).HasColumnName("feedbackId");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.ServiceId).HasColumnName("serviceId");

            entity.HasOne(d => d.Customer).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Feedback__custom__7D439ABD");

            entity.HasOne(d => d.Service).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.ServiceId)
                .HasConstraintName("FK__Feedback__servic__7E37BEF6");
        });

        modelBuilder.Entity<Manager>(entity =>
        {
            entity.HasKey(e => e.ManagerId).HasName("PK__Manager__47E0141F17A8F522");

            entity.ToTable("Manager");

            entity.Property(e => e.ManagerId).HasColumnName("managerId");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(15)
                .HasColumnName("phoneNumber");
            entity.Property(e => e.Position)
                .HasMaxLength(100)
                .HasColumnName("position");
        });

        modelBuilder.Entity<QuizAnswer>(entity =>
        {
            entity.HasKey(e => e.AnswerId).HasName("PK__QuizAnsw__6836B9746437666A");

            entity.ToTable("QuizAnswer");

            entity.Property(e => e.AnswerId).HasColumnName("answerId");
            entity.Property(e => e.Answer).HasColumnName("answer");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.IsCorrect).HasColumnName("isCorrect");
            entity.Property(e => e.QuestionId).HasColumnName("questionId");

            entity.HasOne(d => d.Customer).WithMany(p => p.QuizAnswers)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__QuizAnswe__custo__6754599E");

            entity.HasOne(d => d.Question).WithMany(p => p.QuizAnswers)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__QuizAnswe__quest__68487DD7");
        });

        modelBuilder.Entity<QuizQuestion>(entity =>
        {
            entity.HasKey(e => e.QuestionId).HasName("PK__QuizQues__6238D4B2DFCD765E");

            entity.ToTable("QuizQuestion");

            entity.Property(e => e.QuestionId).HasColumnName("questionId");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.SkinTypeName)
                .HasMaxLength(100)
                .HasColumnName("skinTypeName");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("updatedAt");

            entity.HasOne(d => d.SkinTypeNameNavigation).WithMany(p => p.QuizQuestions)
                .HasForeignKey(d => d.SkinTypeName)
                .HasConstraintName("FK__QuizQuest__skinT__6383C8BA");
        });

        modelBuilder.Entity<QuizServiceResult>(entity =>
        {
            entity.HasKey(e => e.QuizResultId).HasName("PK__QuizServ__00CBB00037EFB92C");

            entity.ToTable("QuizServiceResult");

            entity.Property(e => e.QuizResultId).HasColumnName("quizResultId");
            entity.Property(e => e.AnswerId).HasColumnName("answerId");
            entity.Property(e => e.Result).HasColumnName("result");

            entity.HasOne(d => d.Answer).WithMany(p => p.QuizServiceResults)
                .HasForeignKey(d => d.AnswerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__QuizServi__answe__6B24EA82");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK__Reports__1C9B4E2DA660045C");

            entity.Property(e => e.ReportId).HasColumnName("reportId");
            entity.Property(e => e.ManagerId).HasColumnName("managerId");
            entity.Property(e => e.MonthlyRevenue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("monthlyRevenue");
            entity.Property(e => e.TotalAppointment).HasColumnName("totalAppointment");
            entity.Property(e => e.TotalFeedback).HasColumnName("totalFeedback");
            entity.Property(e => e.TotalRevenue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("totalRevenue");

            entity.HasOne(d => d.Manager).WithMany(p => p.Reports)
                .HasForeignKey(d => d.ManagerId)
                .HasConstraintName("FK__Reports__manager__02FC7413");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__CD98462A27B04444");

            entity.ToTable("Role");

            entity.Property(e => e.RoleId).HasColumnName("roleId");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("roleName");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<Schedule>(entity =>
        {
            entity.HasKey(e => e.ScheduleId).HasName("PK__Schedule__A532EDD471E14F06");

            entity.ToTable("Schedule");

            entity.Property(e => e.ScheduleId).HasColumnName("scheduleId");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.SkinTherapistId).HasColumnName("skinTherapistId");
            entity.Property(e => e.StaffId).HasColumnName("staffId");

            entity.HasOne(d => d.SkinTherapist).WithMany(p => p.Schedules)
                .HasForeignKey(d => d.SkinTherapistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Schedule__skinTh__5DCAEF64");

            entity.HasOne(d => d.Staff).WithMany(p => p.Schedules)
                .HasForeignKey(d => d.StaffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Schedule__staffI__5EBF139D");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PK__Services__455070DFEF044A78");

            entity.Property(e => e.ServiceId).HasColumnName("serviceId");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("createdAt");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("price");
            entity.Property(e => e.QuizResultId).HasColumnName("quizResultId");
            entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

            entity.HasOne(d => d.QuizResult).WithMany(p => p.Services)
                .HasForeignKey(d => d.QuizResultId)
                .HasConstraintName("FK__Services__quizRe__71D1E811");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.Services)
                .HasForeignKey(d => d.ServiceTypeId)
                .HasConstraintName("FK__Services__servic__70DDC3D8");
        });

        modelBuilder.Entity<ServiceType>(entity =>
        {
            entity.HasKey(e => e.ServiceTypeId).HasName("PK__ServiceT__FB4CEA39AEBC4896");

            entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Genre)
                .HasMaxLength(100)
                .HasColumnName("genre");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Period)
                .HasMaxLength(50)
                .HasColumnName("period");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("price");
        });

        modelBuilder.Entity<SkinTherapist>(entity =>
        {
            entity.HasKey(e => e.SkinTherapistId).HasName("PK__SkinTher__4AF55044CC7AD1EB");

            entity.ToTable("SkinTherapist");

            entity.Property(e => e.SkinTherapistId).HasColumnName("skinTherapistId");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Experience)
                .HasMaxLength(50)
                .HasColumnName("experience");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Specialty)
                .HasMaxLength(255)
                .HasColumnName("specialty");
        });

        modelBuilder.Entity<SkinType>(entity =>
        {
            entity.HasKey(e => e.SkinTypeName).HasName("PK__SkinType__547D978E5C45397B");

            entity.ToTable("SkinType");

            entity.Property(e => e.SkinTypeName)
                .HasMaxLength(100)
                .HasColumnName("skinTypeName");
            entity.Property(e => e.CustomerId).HasColumnName("customerId");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.QuizId).HasColumnName("quizId");

            entity.HasOne(d => d.Customer).WithMany(p => p.SkinTypes)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__SkinType__custom__534D60F1");
        });

        modelBuilder.Entity<Slot>(entity =>
        {
            entity.HasKey(e => e.SlotId).HasName("PK__Slot__9C4A67131EC9046F");

            entity.ToTable("Slot");

            entity.Property(e => e.SlotId).HasColumnName("slotId");
            entity.Property(e => e.BookingId).HasColumnName("bookingId");
            entity.Property(e => e.ScheduleId).HasColumnName("scheduleId");
            entity.Property(e => e.ServiceId).HasColumnName("serviceId");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.Time)
                .HasMaxLength(50)
                .HasColumnName("time");

            entity.HasOne(d => d.Booking).WithMany(p => p.Slots)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("FK__Slot__bookingId__778AC167");

            entity.HasOne(d => d.Schedule).WithMany(p => p.Slots)
                .HasForeignKey(d => d.ScheduleId)
                .HasConstraintName("FK__Slot__scheduleId__787EE5A0");

            entity.HasOne(d => d.Service).WithMany(p => p.Slots)
                .HasForeignKey(d => d.ServiceId)
                .HasConstraintName("FK__Slot__serviceId__797309D9");
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.StaffId).HasName("PK__Staff__6465E07ECD8F7CEF");

            entity.Property(e => e.StaffId).HasColumnName("staffId");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(15)
                .HasColumnName("phoneNumber");
            entity.Property(e => e.Position)
                .HasMaxLength(100)
                .HasColumnName("position");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}